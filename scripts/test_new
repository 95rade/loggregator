#!/bin/bash

trap "echo Exited!; exit 1;" SIGINT SIGTERM

function print_usage {
    echo "usage: test [subcommand] [ginkgo args]"
    echo
    echo -e "\033[1mSubcommands:\033[0m"
    echo "   all         Run all the tests (default)"
    echo "   build       Build all binaries for the project"
    echo "   cleaners    Run tools that clean the code base"
    echo "   unit        Run the unit tests"
    echo "   integration Run the integration tests"
}

function print_checkpoint {
    bold_blue "==================================  $@  =================================="
}

function green {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 2)$1$(tput sgr0)"
    else
        echo ":) $1"
    fi
}

function red {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 1)$1$(tput sgr0)"
    else
        echo ":( $1"
    fi
}

function bold_blue {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 6; tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

failure_status=0
function check_output {
    eval "$@"
    local status=$?
    if [[ $status -ne 0 ]]
    then
       failure_status=$status
    fi
}

function loggregator_package {
    local not_loggregator_packages=( dea_logging_agent code.cloudfoundry.org github.com golang.org google.golang.org gopkg.in )
    for p in "${not_loggregator_packages[@]}"
    do
        if [[ "$p" == "$1" ]]
        then
            return 1
        fi
    done
    return 0
}

function run_cleaners {
    which goimports >/dev/null || go get golang.org/x/tools/cmd/goimports
    which misspell >/dev/null || go get github.com/client9/misspell/cmd/misspell

    src_dir="$(dirname $(dirname $0))/src"
    for name in $(ls -1 $src_dir)
    do
        dir="$src_dir/$name"
        if [[ ! -d $dir ]]
        then
            continue
        fi
        if loggregator_package $(basename $dir)
        then
            echo cleaning $dir
            goimports -w $dir
            gofmt -s -w $dir
            misspell -w $dir
        fi
    done
    return 0
}

function run_all {
    check_output run_build
    check_output run_unit $@
    check_output run_integration $@
    return $failure_status
}

function run_build {
    print_checkpoint "Building Binaries"
    "$(dirname $0)/build"
    return $?
}

function run_unit {
    local not_unit_tests="code.cloudfoundry.org,github.com,golang.org,google.golang.org,gopkg.in,integration_tests,lats"
    print_checkpoint "Running Unit Tests"
    ginkgo -r --race --randomizeAllSpecs --cover --skipPackage="${not_unit_tests}" $@
    return $?
}

function run_integration {
    print_checkpoint "Running Integration Tests"
    ginkgo -r --race --randomizeAllSpecs --cover $@ src/integration_tests
    return $?
}

function parse_argc {
    command=run_all
    if [[ $# -eq 0 ]]
    then
        return
    fi

    arg=$1
    case "$arg" in
        -h|-help|--help|help)
            print_usage
            exit 0
            ;;
        all|unit|integration|build|cleaners)
            command=run_$arg
            ;;
        *)
            echo "Invalid command: $arg\n"
            print_usage
            exit 1
            ;;
    esac
}

parse_argc $1
shift
"$command" $@
result=$?
if [[ $result -eq 0 ]]
then
    green "SWEET SUITE SUCCESS"
else
    red "SUITE FAILURE"
fi
exit $result
