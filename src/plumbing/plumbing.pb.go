// Code generated by protoc-gen-go.
// source: plumbing.proto
// DO NOT EDIT!

/*
Package plumbing is a generated protocol buffer package.

It is generated from these files:
	plumbing.proto

It has these top-level messages:
	StreamRequest
	FirehoseRequest
	Response
*/
package plumbing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamRequest struct {
	Auth  string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	AppID string `protobuf:"bytes,2,opt,name=appID" json:"appID,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FirehoseRequest struct {
	Auth  string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	SubID string `protobuf:"bytes,2,opt,name=subID" json:"subID,omitempty"`
}

func (m *FirehoseRequest) Reset()                    { *m = FirehoseRequest{} }
func (m *FirehoseRequest) String() string            { return proto.CompactTextString(m) }
func (*FirehoseRequest) ProtoMessage()               {}
func (*FirehoseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Payload string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*StreamRequest)(nil), "plumbing.StreamRequest")
	proto.RegisterType((*FirehoseRequest)(nil), "plumbing.FirehoseRequest")
	proto.RegisterType((*Response)(nil), "plumbing.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Doppler service

type DopplerClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Doppler_StreamClient, error)
	Firehose(ctx context.Context, in *FirehoseRequest, opts ...grpc.CallOption) (Doppler_FirehoseClient, error)
}

type dopplerClient struct {
	cc *grpc.ClientConn
}

func NewDopplerClient(cc *grpc.ClientConn) DopplerClient {
	return &dopplerClient{cc}
}

func (c *dopplerClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Doppler_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Doppler_serviceDesc.Streams[0], c.cc, "/plumbing.Doppler/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dopplerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Doppler_StreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type dopplerStreamClient struct {
	grpc.ClientStream
}

func (x *dopplerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dopplerClient) Firehose(ctx context.Context, in *FirehoseRequest, opts ...grpc.CallOption) (Doppler_FirehoseClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Doppler_serviceDesc.Streams[1], c.cc, "/plumbing.Doppler/Firehose", opts...)
	if err != nil {
		return nil, err
	}
	x := &dopplerFirehoseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Doppler_FirehoseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type dopplerFirehoseClient struct {
	grpc.ClientStream
}

func (x *dopplerFirehoseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Doppler service

type DopplerServer interface {
	Stream(*StreamRequest, Doppler_StreamServer) error
	Firehose(*FirehoseRequest, Doppler_FirehoseServer) error
}

func RegisterDopplerServer(s *grpc.Server, srv DopplerServer) {
	s.RegisterService(&_Doppler_serviceDesc, srv)
}

func _Doppler_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DopplerServer).Stream(m, &dopplerStreamServer{stream})
}

type Doppler_StreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type dopplerStreamServer struct {
	grpc.ServerStream
}

func (x *dopplerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Doppler_Firehose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirehoseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DopplerServer).Firehose(m, &dopplerFirehoseServer{stream})
}

type Doppler_FirehoseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type dopplerFirehoseServer struct {
	grpc.ServerStream
}

func (x *dopplerFirehoseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Doppler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plumbing.Doppler",
	HandlerType: (*DopplerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Doppler_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Firehose",
			Handler:       _Doppler_Firehose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("plumbing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc8, 0x29, 0xcd,
	0x4d, 0xca, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x2c,
	0xb9, 0x78, 0x83, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x84, 0xb8, 0x58, 0x12, 0x4b, 0x4b, 0x32, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c,
	0x21, 0x11, 0x2e, 0xd6, 0xc4, 0x82, 0x02, 0x4f, 0x17, 0x09, 0x26, 0xb0, 0x20, 0x84, 0xa3, 0x64,
	0xcd, 0xc5, 0xef, 0x96, 0x59, 0x94, 0x9a, 0x91, 0x5f, 0x9c, 0x4a, 0x40, 0x73, 0x71, 0x69, 0x12,
	0x42, 0x33, 0x98, 0xa3, 0xa4, 0xc2, 0xc5, 0x11, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a,
	0x24, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93, 0x9f, 0x98, 0x02, 0xd5, 0x08, 0xe3, 0x1a, 0x35,
	0x33, 0x72, 0xb1, 0xbb, 0xe4, 0x17, 0x14, 0xe4, 0xa4, 0x16, 0x09, 0x59, 0x72, 0xb1, 0x41, 0x5c,
	0x2a, 0x24, 0xae, 0x07, 0xf7, 0x0e, 0x8a, 0xdb, 0xa5, 0x84, 0x10, 0x12, 0x30, 0xc3, 0x95, 0x18,
	0x0c, 0x18, 0x85, 0x6c, 0xb9, 0x38, 0x60, 0x2e, 0x15, 0x92, 0x44, 0xa8, 0x41, 0x73, 0x3d, 0x2e,
	0xed, 0x49, 0x6c, 0xe0, 0x40, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x01, 0x54, 0xb4, 0xc4,
	0x46, 0x01, 0x00, 0x00,
}
