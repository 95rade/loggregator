// Code generated by protoc-gen-go.
// source: plumbing.proto
// DO NOT EDIT!

/*
Package plumbing is a generated protocol buffer package.

It is generated from these files:
	plumbing.proto

It has these top-level messages:
	StreamRequest
	FirehoseRequest
	Response
	ContainerMetricsRequest
	ContainerMetricsResponse
	RecentLogsRequest
	RecentLogsResponse
*/
package plumbing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamRequest struct {
	AppID string `protobuf:"bytes,1,opt,name=appID" json:"appID,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FirehoseRequest struct {
	SubID string `protobuf:"bytes,1,opt,name=subID" json:"subID,omitempty"`
}

func (m *FirehoseRequest) Reset()                    { *m = FirehoseRequest{} }
func (m *FirehoseRequest) String() string            { return proto.CompactTextString(m) }
func (*FirehoseRequest) ProtoMessage()               {}
func (*FirehoseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ContainerMetricsRequest struct {
	AppID string `protobuf:"bytes,1,opt,name=appID" json:"appID,omitempty"`
}

func (m *ContainerMetricsRequest) Reset()                    { *m = ContainerMetricsRequest{} }
func (m *ContainerMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerMetricsRequest) ProtoMessage()               {}
func (*ContainerMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ContainerMetricsResponse struct {
	Payload [][]byte `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ContainerMetricsResponse) Reset()                    { *m = ContainerMetricsResponse{} }
func (m *ContainerMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerMetricsResponse) ProtoMessage()               {}
func (*ContainerMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RecentLogsRequest struct {
	AppID string `protobuf:"bytes,1,opt,name=appID" json:"appID,omitempty"`
}

func (m *RecentLogsRequest) Reset()                    { *m = RecentLogsRequest{} }
func (m *RecentLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*RecentLogsRequest) ProtoMessage()               {}
func (*RecentLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RecentLogsResponse struct {
	Payload [][]byte `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RecentLogsResponse) Reset()                    { *m = RecentLogsResponse{} }
func (m *RecentLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*RecentLogsResponse) ProtoMessage()               {}
func (*RecentLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*StreamRequest)(nil), "plumbing.StreamRequest")
	proto.RegisterType((*FirehoseRequest)(nil), "plumbing.FirehoseRequest")
	proto.RegisterType((*Response)(nil), "plumbing.Response")
	proto.RegisterType((*ContainerMetricsRequest)(nil), "plumbing.ContainerMetricsRequest")
	proto.RegisterType((*ContainerMetricsResponse)(nil), "plumbing.ContainerMetricsResponse")
	proto.RegisterType((*RecentLogsRequest)(nil), "plumbing.RecentLogsRequest")
	proto.RegisterType((*RecentLogsResponse)(nil), "plumbing.RecentLogsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Doppler service

type DopplerClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Doppler_StreamClient, error)
	Firehose(ctx context.Context, in *FirehoseRequest, opts ...grpc.CallOption) (Doppler_FirehoseClient, error)
	ContainerMetrics(ctx context.Context, in *ContainerMetricsRequest, opts ...grpc.CallOption) (*ContainerMetricsResponse, error)
	RecentLogs(ctx context.Context, in *RecentLogsRequest, opts ...grpc.CallOption) (*RecentLogsResponse, error)
}

type dopplerClient struct {
	cc *grpc.ClientConn
}

func NewDopplerClient(cc *grpc.ClientConn) DopplerClient {
	return &dopplerClient{cc}
}

func (c *dopplerClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Doppler_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Doppler_serviceDesc.Streams[0], c.cc, "/plumbing.Doppler/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dopplerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Doppler_StreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type dopplerStreamClient struct {
	grpc.ClientStream
}

func (x *dopplerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dopplerClient) Firehose(ctx context.Context, in *FirehoseRequest, opts ...grpc.CallOption) (Doppler_FirehoseClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Doppler_serviceDesc.Streams[1], c.cc, "/plumbing.Doppler/Firehose", opts...)
	if err != nil {
		return nil, err
	}
	x := &dopplerFirehoseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Doppler_FirehoseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type dopplerFirehoseClient struct {
	grpc.ClientStream
}

func (x *dopplerFirehoseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dopplerClient) ContainerMetrics(ctx context.Context, in *ContainerMetricsRequest, opts ...grpc.CallOption) (*ContainerMetricsResponse, error) {
	out := new(ContainerMetricsResponse)
	err := grpc.Invoke(ctx, "/plumbing.Doppler/ContainerMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dopplerClient) RecentLogs(ctx context.Context, in *RecentLogsRequest, opts ...grpc.CallOption) (*RecentLogsResponse, error) {
	out := new(RecentLogsResponse)
	err := grpc.Invoke(ctx, "/plumbing.Doppler/RecentLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Doppler service

type DopplerServer interface {
	Stream(*StreamRequest, Doppler_StreamServer) error
	Firehose(*FirehoseRequest, Doppler_FirehoseServer) error
	ContainerMetrics(context.Context, *ContainerMetricsRequest) (*ContainerMetricsResponse, error)
	RecentLogs(context.Context, *RecentLogsRequest) (*RecentLogsResponse, error)
}

func RegisterDopplerServer(s *grpc.Server, srv DopplerServer) {
	s.RegisterService(&_Doppler_serviceDesc, srv)
}

func _Doppler_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DopplerServer).Stream(m, &dopplerStreamServer{stream})
}

type Doppler_StreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type dopplerStreamServer struct {
	grpc.ServerStream
}

func (x *dopplerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Doppler_Firehose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirehoseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DopplerServer).Firehose(m, &dopplerFirehoseServer{stream})
}

type Doppler_FirehoseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type dopplerFirehoseServer struct {
	grpc.ServerStream
}

func (x *dopplerFirehoseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Doppler_ContainerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DopplerServer).ContainerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plumbing.Doppler/ContainerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DopplerServer).ContainerMetrics(ctx, req.(*ContainerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doppler_RecentLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DopplerServer).RecentLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plumbing.Doppler/RecentLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DopplerServer).RecentLogs(ctx, req.(*RecentLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Doppler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plumbing.Doppler",
	HandlerType: (*DopplerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerMetrics",
			Handler:    _Doppler_ContainerMetrics_Handler,
		},
		{
			MethodName: "RecentLogs",
			Handler:    _Doppler_RecentLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Doppler_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Firehose",
			Handler:       _Doppler_Firehose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("plumbing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xad, 0xe2, 0x56, 0x5f, 0xfc, 0xfb, 0x22, 0xac, 0x56, 0x0f, 0x1a, 0x14, 0xf5, 0x52,
	0x45, 0xbd, 0x78, 0xf0, 0xe4, 0x10, 0x06, 0x7a, 0x89, 0x47, 0x4f, 0xe9, 0x7c, 0x99, 0x85, 0x2e,
	0x89, 0x49, 0x7a, 0xf0, 0x33, 0xf9, 0x25, 0x85, 0x8e, 0x98, 0x5a, 0xb7, 0xf5, 0xf8, 0x90, 0xdf,
	0xfb, 0x3c, 0xe5, 0x47, 0x61, 0x5b, 0x97, 0xd5, 0x34, 0x2f, 0xe4, 0x24, 0xd3, 0x46, 0x39, 0x85,
	0xb1, 0xcf, 0xec, 0x0c, 0xb6, 0x5e, 0x9d, 0x21, 0x31, 0xe5, 0xf4, 0x59, 0x91, 0x75, 0xb8, 0x0f,
	0xeb, 0x42, 0xeb, 0xd1, 0x30, 0x89, 0x8e, 0xa3, 0x8b, 0x0d, 0x3e, 0x0b, 0xec, 0x1c, 0x76, 0x9e,
	0x0a, 0x43, 0x1f, 0xca, 0x52, 0x03, 0xb4, 0x55, 0x1e, 0xc0, 0x3a, 0xb0, 0x53, 0x88, 0x39, 0x59,
	0xad, 0xa4, 0x25, 0x4c, 0xa0, 0xaf, 0xc5, 0x57, 0xa9, 0xc4, 0x7b, 0xcd, 0x6c, 0x72, 0x1f, 0xd9,
	0x15, 0x0c, 0x1e, 0x95, 0x74, 0xa2, 0x90, 0x64, 0x5e, 0xc8, 0x99, 0x62, 0x6c, 0x97, 0xef, 0xdf,
	0x41, 0xf2, 0xff, 0x60, 0xde, 0xcc, 0x5a, 0x73, 0xe6, 0x12, 0xf6, 0x38, 0x8d, 0x49, 0xba, 0x67,
	0x35, 0xe9, 0x18, 0xc8, 0x00, 0x9b, 0x68, 0x57, 0xf5, 0xcd, 0xf7, 0x2a, 0xf4, 0x87, 0x4a, 0xeb,
	0x92, 0x0c, 0xde, 0x43, 0x6f, 0xe6, 0x10, 0x07, 0xd9, 0xaf, 0xe8, 0x3f, 0x56, 0x53, 0x0c, 0x0f,
	0xbe, 0x9c, 0xad, 0x5c, 0x47, 0xf8, 0x00, 0xb1, 0xf7, 0x8a, 0x07, 0x81, 0x69, 0xb9, 0x5e, 0x78,
	0xfe, 0x06, 0xbb, 0x6d, 0x2d, 0x78, 0x12, 0xd8, 0x05, 0x8e, 0x53, 0xb6, 0x0c, 0xf1, 0xf5, 0x38,
	0x02, 0x08, 0x4a, 0xf0, 0xb0, 0xf9, 0x09, 0x2d, 0xa7, 0xe9, 0xd1, 0xfc, 0x47, 0x5f, 0x95, 0xf7,
	0xea, 0xdf, 0xee, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x0c, 0xbd, 0x3c, 0x88, 0x02, 0x00,
	0x00,
}
