// Code generated by protoc-gen-go.
// source: doppler.proto
// DO NOT EDIT!

/*
Package loggregator is a generated protocol buffer package.

It is generated from these files:
	doppler.proto
	envelope.proto

It has these top-level messages:
	PushResponse
	Envelope
	Value
	Log
	Counter
	Gauge
	CorrelatedGauge
	Timer
*/
package loggregator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PushResponse struct {
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*PushResponse)(nil), "loggregator.PushResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DopplerIn service

type DopplerInClient interface {
	Pusher(ctx context.Context, opts ...grpc.CallOption) (DopplerIn_PusherClient, error)
}

type dopplerInClient struct {
	cc *grpc.ClientConn
}

func NewDopplerInClient(cc *grpc.ClientConn) DopplerInClient {
	return &dopplerInClient{cc}
}

func (c *dopplerInClient) Pusher(ctx context.Context, opts ...grpc.CallOption) (DopplerIn_PusherClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DopplerIn_serviceDesc.Streams[0], c.cc, "/loggregator.DopplerIn/Pusher", opts...)
	if err != nil {
		return nil, err
	}
	x := &dopplerInPusherClient{stream}
	return x, nil
}

type DopplerIn_PusherClient interface {
	Send(*Envelope) error
	CloseAndRecv() (*PushResponse, error)
	grpc.ClientStream
}

type dopplerInPusherClient struct {
	grpc.ClientStream
}

func (x *dopplerInPusherClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dopplerInPusherClient) CloseAndRecv() (*PushResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DopplerIn service

type DopplerInServer interface {
	Pusher(DopplerIn_PusherServer) error
}

func RegisterDopplerInServer(s *grpc.Server, srv DopplerInServer) {
	s.RegisterService(&_DopplerIn_serviceDesc, srv)
}

func _DopplerIn_Pusher_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DopplerInServer).Pusher(&dopplerInPusherServer{stream})
}

type DopplerIn_PusherServer interface {
	SendAndClose(*PushResponse) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type dopplerInPusherServer struct {
	grpc.ServerStream
}

func (x *dopplerInPusherServer) SendAndClose(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dopplerInPusherServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DopplerIn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loggregator.DopplerIn",
	HandlerType: (*DopplerInServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pusher",
			Handler:       _DopplerIn_Pusher_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("doppler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xc9, 0x2f, 0x28,
	0xc8, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0xc9, 0x4f, 0x4f, 0x2f,
	0x4a, 0x4d, 0x4f, 0x2c, 0xc9, 0x2f, 0x92, 0xe2, 0x4b, 0xcd, 0x2b, 0x4b, 0xcd, 0xc9, 0x2f, 0x48,
	0x85, 0x48, 0x2a, 0xf1, 0x71, 0xf1, 0x04, 0x94, 0x16, 0x67, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x1a, 0x79, 0x73, 0x71, 0xba, 0x40, 0x74, 0x7b, 0xe6, 0x09, 0xd9, 0x71, 0xb1, 0x81,
	0x24, 0x53, 0x8b, 0x84, 0x44, 0xf5, 0x90, 0x0c, 0xd1, 0x73, 0x85, 0x9a, 0x21, 0x25, 0x89, 0x22,
	0x8c, 0x6c, 0x90, 0x12, 0x83, 0x06, 0x63, 0x12, 0x1b, 0xd8, 0x0e, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x50, 0x77, 0xe8, 0x37, 0x91, 0x00, 0x00, 0x00,
}
