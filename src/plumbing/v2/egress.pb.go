// Code generated by protoc-gen-go.
// source: egress.proto
// DO NOT EDIT!

package loggregator_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EgressRequest struct {
	ShardId string  `protobuf:"bytes,1,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	Filter  *Filter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
}

func (m *EgressRequest) Reset()                    { *m = EgressRequest{} }
func (m *EgressRequest) String() string            { return proto.CompactTextString(m) }
func (*EgressRequest) ProtoMessage()               {}
func (*EgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *EgressRequest) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type Filter struct {
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Filter_Log
	//	*Filter_Counter
	//	*Filter_Gauge
	//	*Filter_Timer
	Message isFilter_Message `protobuf_oneof:"Message"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isFilter_Message interface {
	isFilter_Message()
}

type Filter_Log struct {
	Log *LogFilter `protobuf:"bytes,2,opt,name=log,oneof"`
}
type Filter_Counter struct {
	Counter *CounterFilter `protobuf:"bytes,3,opt,name=counter,oneof"`
}
type Filter_Gauge struct {
	Gauge *GaugeFilter `protobuf:"bytes,4,opt,name=gauge,oneof"`
}
type Filter_Timer struct {
	Timer *TimerFilter `protobuf:"bytes,5,opt,name=timer,oneof"`
}

func (*Filter_Log) isFilter_Message()     {}
func (*Filter_Counter) isFilter_Message() {}
func (*Filter_Gauge) isFilter_Message()   {}
func (*Filter_Timer) isFilter_Message()   {}

func (m *Filter) GetMessage() isFilter_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Filter) GetLog() *LogFilter {
	if x, ok := m.GetMessage().(*Filter_Log); ok {
		return x.Log
	}
	return nil
}

func (m *Filter) GetCounter() *CounterFilter {
	if x, ok := m.GetMessage().(*Filter_Counter); ok {
		return x.Counter
	}
	return nil
}

func (m *Filter) GetGauge() *GaugeFilter {
	if x, ok := m.GetMessage().(*Filter_Gauge); ok {
		return x.Gauge
	}
	return nil
}

func (m *Filter) GetTimer() *TimerFilter {
	if x, ok := m.GetMessage().(*Filter_Timer); ok {
		return x.Timer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Filter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Filter_OneofMarshaler, _Filter_OneofUnmarshaler, _Filter_OneofSizer, []interface{}{
		(*Filter_Log)(nil),
		(*Filter_Counter)(nil),
		(*Filter_Gauge)(nil),
		(*Filter_Timer)(nil),
	}
}

func _Filter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Filter)
	// Message
	switch x := m.Message.(type) {
	case *Filter_Log:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Log); err != nil {
			return err
		}
	case *Filter_Counter:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Counter); err != nil {
			return err
		}
	case *Filter_Gauge:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Gauge); err != nil {
			return err
		}
	case *Filter_Timer:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Filter.Message has unexpected type %T", x)
	}
	return nil
}

func _Filter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Filter)
	switch tag {
	case 2: // Message.log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LogFilter)
		err := b.DecodeMessage(msg)
		m.Message = &Filter_Log{msg}
		return true, err
	case 3: // Message.counter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CounterFilter)
		err := b.DecodeMessage(msg)
		m.Message = &Filter_Counter{msg}
		return true, err
	case 4: // Message.gauge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GaugeFilter)
		err := b.DecodeMessage(msg)
		m.Message = &Filter_Gauge{msg}
		return true, err
	case 5: // Message.timer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimerFilter)
		err := b.DecodeMessage(msg)
		m.Message = &Filter_Timer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Filter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Filter)
	// Message
	switch x := m.Message.(type) {
	case *Filter_Log:
		s := proto.Size(x.Log)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Filter_Counter:
		s := proto.Size(x.Counter)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Filter_Gauge:
		s := proto.Size(x.Gauge)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Filter_Timer:
		s := proto.Size(x.Timer)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogFilter struct {
}

func (m *LogFilter) Reset()                    { *m = LogFilter{} }
func (m *LogFilter) String() string            { return proto.CompactTextString(m) }
func (*LogFilter) ProtoMessage()               {}
func (*LogFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type CounterFilter struct {
}

func (m *CounterFilter) Reset()                    { *m = CounterFilter{} }
func (m *CounterFilter) String() string            { return proto.CompactTextString(m) }
func (*CounterFilter) ProtoMessage()               {}
func (*CounterFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type GaugeFilter struct {
}

func (m *GaugeFilter) Reset()                    { *m = GaugeFilter{} }
func (m *GaugeFilter) String() string            { return proto.CompactTextString(m) }
func (*GaugeFilter) ProtoMessage()               {}
func (*GaugeFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type TimerFilter struct {
}

func (m *TimerFilter) Reset()                    { *m = TimerFilter{} }
func (m *TimerFilter) String() string            { return proto.CompactTextString(m) }
func (*TimerFilter) ProtoMessage()               {}
func (*TimerFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func init() {
	proto.RegisterType((*EgressRequest)(nil), "loggregator.v2.EgressRequest")
	proto.RegisterType((*Filter)(nil), "loggregator.v2.Filter")
	proto.RegisterType((*LogFilter)(nil), "loggregator.v2.LogFilter")
	proto.RegisterType((*CounterFilter)(nil), "loggregator.v2.CounterFilter")
	proto.RegisterType((*GaugeFilter)(nil), "loggregator.v2.GaugeFilter")
	proto.RegisterType((*TimerFilter)(nil), "loggregator.v2.TimerFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Egress service

type EgressClient interface {
	Receiver(ctx context.Context, in *EgressRequest, opts ...grpc.CallOption) (Egress_ReceiverClient, error)
}

type egressClient struct {
	cc *grpc.ClientConn
}

func NewEgressClient(cc *grpc.ClientConn) EgressClient {
	return &egressClient{cc}
}

func (c *egressClient) Receiver(ctx context.Context, in *EgressRequest, opts ...grpc.CallOption) (Egress_ReceiverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Egress_serviceDesc.Streams[0], c.cc, "/loggregator.v2.Egress/Receiver", opts...)
	if err != nil {
		return nil, err
	}
	x := &egressReceiverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Egress_ReceiverClient interface {
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type egressReceiverClient struct {
	grpc.ClientStream
}

func (x *egressReceiverClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Egress service

type EgressServer interface {
	Receiver(*EgressRequest, Egress_ReceiverServer) error
}

func RegisterEgressServer(s *grpc.Server, srv EgressServer) {
	s.RegisterService(&_Egress_serviceDesc, srv)
}

func _Egress_Receiver_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EgressServer).Receiver(m, &egressReceiverServer{stream})
}

type Egress_ReceiverServer interface {
	Send(*Envelope) error
	grpc.ServerStream
}

type egressReceiverServer struct {
	grpc.ServerStream
}

func (x *egressReceiverServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

var _Egress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loggregator.v2.Egress",
	HandlerType: (*EgressServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receiver",
			Handler:       _Egress_Receiver_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("egress.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0x4b, 0x6b, 0x69, 0x19, 0xa4, 0x26, 0x7b, 0x30, 0xb4, 0x8d, 0x49, 0xb3, 0xa7, 0x5e,
	0x24, 0x86, 0x9e, 0xbc, 0x6a, 0xb4, 0x36, 0xd1, 0x83, 0xc4, 0x93, 0x17, 0x83, 0x30, 0xae, 0x24,
	0xd8, 0xad, 0xbb, 0xc0, 0x2f, 0xf0, 0x87, 0x9b, 0xdd, 0x45, 0x5a, 0xa8, 0xc7, 0x9d, 0xf7, 0xbe,
	0xb7, 0x33, 0x79, 0x70, 0x8a, 0x4c, 0xa0, 0x94, 0xc1, 0x4e, 0xf0, 0x82, 0x93, 0x49, 0xce, 0x19,
	0x13, 0xc8, 0xe2, 0x82, 0x8b, 0xa0, 0x0a, 0x67, 0x13, 0xdc, 0x56, 0x98, 0xf3, 0x1d, 0x1a, 0x9d,
	0xbe, 0x82, 0x77, 0xa7, 0xfd, 0x11, 0x7e, 0x97, 0x28, 0x0b, 0x32, 0x85, 0xb1, 0xfc, 0x8c, 0x45,
	0xfa, 0x96, 0xa5, 0xbe, 0xb5, 0xb0, 0x96, 0x4e, 0x34, 0xd2, 0xef, 0x4d, 0x4a, 0x02, 0xb0, 0x3f,
	0xb2, 0xbc, 0x40, 0xe1, 0xf7, 0x17, 0xd6, 0xd2, 0x0d, 0xcf, 0x83, 0x76, 0x78, 0x70, 0xaf, 0xd5,
	0xa8, 0x76, 0xd1, 0x9f, 0x3e, 0xd8, 0x66, 0x44, 0xe6, 0xe0, 0x48, 0x5e, 0x8a, 0x04, 0xf7, 0xb1,
	0x63, 0x33, 0xd8, 0xa4, 0xe4, 0x12, 0x06, 0x39, 0x67, 0x75, 0xe8, 0xb4, 0x1b, 0xfa, 0xc8, 0x99,
	0x09, 0x79, 0xe8, 0x45, 0xca, 0x47, 0xae, 0x61, 0x94, 0xf0, 0x72, 0xab, 0xf6, 0x18, 0x68, 0xe4,
	0xa2, 0x8b, 0xdc, 0x1a, 0xb9, 0xc1, 0xfe, 0xfc, 0x64, 0x05, 0x43, 0x16, 0x97, 0x0c, 0xfd, 0x13,
	0x0d, 0xce, 0xbb, 0xe0, 0x5a, 0x89, 0x0d, 0x66, 0xbc, 0x0a, 0x2a, 0xb2, 0x2f, 0x14, 0xfe, 0xf0,
	0x7f, 0xe8, 0x45, 0x89, 0x7b, 0x48, 0x7b, 0x6f, 0x1c, 0x18, 0x3d, 0xa1, 0x94, 0x31, 0x43, 0xea,
	0x82, 0xd3, 0xdc, 0x40, 0xcf, 0xc0, 0x6b, 0x6d, 0x47, 0x3d, 0x70, 0x0f, 0x7e, 0x55, 0xcf, 0x83,
	0xbc, 0xf0, 0x19, 0x6c, 0x53, 0x0f, 0x59, 0xc3, 0x38, 0xc2, 0x04, 0xb3, 0x0a, 0x05, 0x39, 0x3a,
	0xb8, 0x55, 0xe1, 0xcc, 0x3f, 0x92, 0xeb, 0xce, 0x69, 0xef, 0xca, 0x7a, 0xb7, 0x75, 0xf1, 0xab,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x10, 0x0b, 0x77, 0x28, 0x02, 0x00, 0x00,
}
