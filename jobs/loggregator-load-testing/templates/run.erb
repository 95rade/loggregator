#!/bin/bash -l

set -e

export TIME="<%= p('loggregator_load_testing.time') %>"
export ORG="<%= p('loggregator_load_testing.org') %>"
export SPACE="<%= p('loggregator_load_testing.space') %>"
export API_URL="<%= p('loggregator_load_testing.api_url') %>"
export CF_USERNAME="<%= p('loggregator_load_testing.username') %>"
export CF_PASSWORD="<%= p('loggregator_load_testing.password') %>"
export ROUTE_SCHEME="<%= p('loggregator_load_testing.route_scheme') %>"
export SKIP_CERT_VERIFY="<%= p('ssl.skip_cert_verify') %>"

export GOROOT=$(readlink -nf /var/vcap/packages/golang1.6)
export PACKAGES_DIR=/var/vcap/packages/loggregator-load-testing
export GOPATH=$PACKAGES_DIR
export PATH=${PACKAGES_DIR}/bin:${GOROOT}/bin:${PATH}

build() {
  local apps=(logcounter logemitter logfin)

  for app in ${apps[@]}; do
    pushd "$PACKAGES_DIR/src/tools/$app/build"
      ./build.sh
    popd
  done
}

cli_setup() {
  cd /var/vcap/jobs/loggregator-load-testing/config

  if [ "$SKIP_CERT_VERIFY" = "true" ]; then
    skip_ssl="--skip-ssl-validation"
  fi
  cf login -a "$API_URL" -u "$CF_USERNAME" -p "$CF_PASSWORD" -o "$ORG" -s "$SPACE" "$skip_ssl"
}

start() {
  cf push logfin
  LOGFIN_URL=$ROUTE_SCHEME://$(cf app logfin | grep urls | awk '{print $2}')
  cf push logcounter
  cf push logemitter --no-start
  cf set-env logemitter LOGFIN_URL $LOGFIN_URL
  cf start logemitter
}

block_until_done() {
  # Wait the minimum time before checking to see if everything is ready
  sleep $TIME

  while true; do
    echo checking status of test...
    status=`curl -s -o /dev/null -w "%{http_code}" $LOGFIN_URL/status`
    if [ "$status" = "200" ]; then
      break
    fi
    sleep 10s
  done
  echo test complete
}

report() {
  curl $ROUTE_SCHEME://$(cf app logcounter | grep urls | sed 's|^[^ ]* \([^,]*\).*$|\1|')?report
}

teardown() {
  cf delete -f logemitter
  cf delete -f logcounter
  cf delete -f logfin
}

build
cli_setup
start
block_until_done
report
teardown
